# routes/tests_routes.py

import json
from flask import Blueprint, render_template, request, session, redirect, url_for, current_app

# ‚úÖ –ß–∏—Å—Ç—ã–π Blueprint
card_tests_bp = Blueprint("tests", __name__, url_prefix="/tests")

print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: routes/tests_routes.py")  # üëà –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
with open("radio_questions.json", encoding="utf-8") as f:
    radio_questions = json.load(f)

# üîç –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
@card_tests_bp.record_once
def log_routes(state):
    print("üìú –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
    for rule in state.app.url_map.iter_rules():
        print("üîó", rule)

# ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
@card_tests_bp.route("/card-test/<int:index>", methods=["GET", "POST"])
def card_test_handler(index):
    print(f"üìÇ –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(radio_questions)}")
    print(f"üìå –í—ã–∑–≤–∞–Ω –≤–æ–ø—Ä–æ—Å #{index}")

    if index < 0 or index >= len(radio_questions):
        print(f"‚ùå –ò–Ω–¥–µ–∫—Å {index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        return "Einde van de test!", 404

    question = radio_questions[index]
    print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question.get('question')}")
    result = None

    if request.method == "POST":
        selected = request.form.get("selected")
        print(f"üì§ –û—Ç–≤–µ—Ç: {selected}")
        if selected == question.get("answer"):
            result = "correct"
            print("‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            result = "incorrect"
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {question.get('answer')}")

    return render_template("test_card.html", question=question, index=index, result=result)

# ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
@card_tests_bp.route("/")
def subject_tests():
    subjects = [
        {
            "name": "Anatomy",
            "tests": [
                {"id": 1, "title": "Teeth Basics"},
                {"id": 2, "title": "Skull Anatomy"}
            ]
        },
        {
            "name": "Ethics & Law",
            "tests": [
                {"id": 3, "title": "Confidentiality"}
            ]
        }
    ]
    return render_template("tests.html", subjects=subjects)

# ‚úÖ –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@card_tests_bp.route("/test/<subject>/<int:test_id>")
def start_test(subject, test_id):
    return render_template("test.html", subject=subject, test_id=test_id)

# ‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ–¥—Å—á—ë—Ç–æ–º –±–∞–ª–ª–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
@card_tests_bp.route("/full-test", methods=["GET", "POST"])
def full_test():
    print("üìç –í—ã–∑–≤–∞–Ω –º–∞—Ä—à—Ä—É—Ç /full-test")

    if request.args.get("reset") == "true":
        session.clear()
        return redirect(url_for("tests.full_test"))

    try:
        total = len(radio_questions)

        if "step" not in session:
            print("üß™ –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é step –∏ score")
            session["step"] = 0
            session["score"] = 0

        step = session["step"]

        if step >= total:
            final_score = session["score"]
            session.clear()
            print(f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–∞–ª–ª—ã: {final_score}/{total}")
            return render_template("test_result.html", score=final_score, total=total)

        question = radio_questions[step]
        print(f"‚û°Ô∏è –í–æ–ø—Ä–æ—Å {step + 1}: {question.get('question')}")

        if request.method == "POST":
            selected = request.form.get("selected")
            print(f"üì§ –û—Ç–≤–µ—Ç: {selected} ‚Äî –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {question.get('answer')}")

            if selected == question.get("answer"):
                session["score"] += 1
                result = "correct"
            else:
                result = "incorrect"

    # –ù–ï –ø—Ä–∏–±–∞–≤–ª—è–µ–º step —Å—Ä–∞–∑—É, –∞ –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç
            return render_template(
                "test_full.html",
                question=question,
                step=step,
                total=total,
                result=result,
                answer=question.get("answer")
            )


        return render_template(
            "test_full.html",
            question=question,
            step=step,
            total=total,
            result=None,
            answer=question.get("answer")
        )

    except Exception as e:
        import traceback
        traceback.print_exc()
        return f"–û—à–∏–±–∫–∞: {e}", 500

@card_tests_bp.route("/full-test/next", methods=["POST"])
def full_test_next():
    session["step"] += 1
    return redirect(url_for("tests.full_test"))
